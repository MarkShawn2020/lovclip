name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: Check out Git repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        
    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9
        
    - name: Get pnpm store directory
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Configure git
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        
    - name: Bump version
      id: version
      run: |
        if [ "${{ github.event.inputs.version_type }}" = "prerelease" ]; then
          NEW_VERSION=$(pnpm version prerelease --preid=beta --no-git-tag-version)
        else
          NEW_VERSION=$(pnpm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
        fi
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Update CHANGELOG
      run: |
        DATE=$(date '+%Y-%m-%d')
        VERSION="${{ steps.version.outputs.version_number }}"
        
        # Create or update CHANGELOG.md
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Add new version entry
        {
          echo ""
          echo "## [$VERSION] - $DATE"
          echo ""
          echo "### Added"
          echo "- New features and improvements"
          echo ""
          echo "### Changed"
          echo "- Updated dependencies"
          echo ""
          echo "### Fixed"
          echo "- Bug fixes and stability improvements"
          echo ""
          cat CHANGELOG.md
        } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
        
    - name: Commit changes
      run: |
        git add package.json CHANGELOG.md
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
        git tag ${{ steps.version.outputs.new_version }}
        
    - name: Push changes
      run: |
        git push origin main
        git push origin ${{ steps.version.outputs.new_version }}
        
    - name: Create GitHub Release
      uses: ncipollo/create-release@v1
      with:
        tag: ${{ steps.version.outputs.new_version }}
        name: Release ${{ steps.version.outputs.new_version }}
        body: |
          ## Changes in ${{ steps.version.outputs.new_version }}
          
          Please see the [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed information.
          
          ### Downloads
          
          - **macOS**: Download the `.dmg` file for easy installation
          - **Windows**: Download the `.exe` installer  
          - **Linux**: Download the `.AppImage` or `.deb` file
          
          ### Installation
          
          1. Download the appropriate file for your operating system
          2. Run the installer or mount the disk image
          3. Follow the installation prompts
          
          ### Auto-updater
          
          The application includes an auto-updater that will notify you when new versions are available.
        draft: false
        prerelease: ${{ contains(steps.version.outputs.new_version, 'beta') }}
        token: ${{ secrets.GITHUB_TOKEN }}